import requests
import json
import time

# API base URL
BASE_URL = "http://localhost:8000"

def test_health_endpoint():
    """SaÄŸlÄ±k kontrolÃ¼ endpoint'ini test et"""
    print("=== SaÄŸlÄ±k KontrolÃ¼ Testi ===")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.json()}")
        print()
        return response.status_code == 200
    except Exception as e:
        print(f"Hata: {e}")
        return False

def test_root_endpoint():
    """Ana endpoint'i test et"""
    print("=== Ana Endpoint Testi ===")
    try:
        response = requests.get(f"{BASE_URL}/")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.json()}")
        print()
        return response.status_code == 200
    except Exception as e:
        print(f"Hata: {e}")
        return False

def test_model_info():
    """Model bilgilerini test et"""
    print("=== Model Bilgileri Testi ===")
    try:
        response = requests.get(f"{BASE_URL}/model/info")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.json()}")
        print()
        return response.status_code == 200
    except Exception as e:
        print(f"Hata: {e}")
        return False

def test_single_prediction():
    """Tek metin tahmini test et"""
    print("=== Tek Metin Tahmini Testi ===")
    
    test_cases = [
        "Bu film gerÃ§ekten harika! Ã‡ok beÄŸendim.",
        "Ã‡ok kÃ¶tÃ¼ bir deneyimdi, hiÃ§ tavsiye etmem.",
        "Orta karar bir Ã¼rÃ¼n, ne iyi ne kÃ¶tÃ¼.",
        "MÃ¼kemmel bir hizmet aldÄ±k, teÅŸekkÃ¼rler!",
        "Berbat bir yemek, paramÄ± geri istiyorum."
    ]
    
    for i, text in enumerate(test_cases, 1):
        print(f"Test {i}: {text}")
        try:
            response = requests.post(
                f"{BASE_URL}/predict",
                json={"text": text}
            )
            print(f"Status Code: {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                print(f"Sentiment: {result['sentiment']}")
                print(f"Confidence: {result['confidence']:.3f}")
                print(f"Prediction: {result['prediction']}")
            else:
                print(f"Error: {response.text}")
            print("-" * 50)
        except Exception as e:
            print(f"Hata: {e}")
            print("-" * 50)

def test_batch_prediction():
    """Toplu tahmin test et"""
    print("=== Toplu Tahmin Testi ===")
    
    texts = [
        "Bu film harika!",
        "KÃ¶tÃ¼ bir deneyim.",
        "Normal bir gÃ¼n.",
        "MÃ¼kemmel!",
        "Berbat!"
    ]
    
    try:
        response = requests.post(
            f"{BASE_URL}/predict/batch",
            json={"texts": texts}
        )
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"Toplam sonuÃ§ sayÄ±sÄ±: {len(result['results'])}")
            
            for i, item in enumerate(result['results'], 1):
                print(f"SonuÃ§ {i}:")
                print(f"  Metin: {item['text']}")
                print(f"  Sentiment: {item['sentiment']}")
                print(f"  Confidence: {item['confidence']:.3f}")
                print(f"  Prediction: {item['prediction']}")
                print()
        else:
            print(f"Error: {response.text}")
    except Exception as e:
        print(f"Hata: {e}")

def test_error_cases():
    """Hata durumlarÄ±nÄ± test et"""
    print("=== Hata DurumlarÄ± Testi ===")
    
    # BoÅŸ metin testi
    print("1. BoÅŸ metin testi:")
    try:
        response = requests.post(
            f"{BASE_URL}/predict",
            json={"text": ""}
        )
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
    except Exception as e:
        print(f"Hata: {e}")
    
    print("-" * 30)
    
    # BoÅŸ liste testi
    print("2. BoÅŸ liste testi:")
    try:
        response = requests.post(
            f"{BASE_URL}/predict/batch",
            json={"texts": []}
        )
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
    except Exception as e:
        print(f"Hata: {e}")

def test_retrain():
    """Model yeniden eÄŸitme test et"""
    print("=== Model Yeniden EÄŸitme Testi ===")
    try:
        response = requests.post(f"{BASE_URL}/retrain")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.json()}")
        print()
        return response.status_code == 200
    except Exception as e:
        print(f"Hata: {e}")
        return False

def main():
    """Ana test fonksiyonu"""
    print("ğŸš€ Sentiment Analysis API Test BaÅŸlÄ±yor...")
    print("=" * 60)
    
    # API'nin Ã§alÄ±ÅŸÄ±p Ã§alÄ±ÅŸmadÄ±ÄŸÄ±nÄ± kontrol et
    print("API'nin baÅŸlatÄ±lmasÄ± bekleniyor...")
    time.sleep(3)
    
    # Temel endpoint testleri
    test_health_endpoint()
    test_root_endpoint()
    test_model_info()
    
    # Tahmin testleri
    test_single_prediction()
    test_batch_prediction()
    
    # Hata durumlarÄ±
    test_error_cases()
    
    # Model yeniden eÄŸitme
    test_retrain()
    
    print("âœ… TÃ¼m testler tamamlandÄ±!")

if __name__ == "__main__":
    main() 